import "./chunk-P6V6RLEF.js";
import "./chunk-4QSXBM22.js";
import "./chunk-E3RF53OC.js";
import "./chunk-LCX7D4YD.js";
import "./chunk-HXFQUVAC.js";
import "./chunk-J52W5AJB.js";
import "./chunk-C7H2BX76.js";
import "./chunk-EDABPZRO.js";
import "./chunk-SI6ZXCMD.js";
import "./chunk-TKSXA5AL.js";
import "./chunk-D3RKE7NZ.js";
import "./chunk-PDGPTUUZ.js";
import "./chunk-7D4RM7YW.js";
import "./chunk-AKNKU2G6.js";
import "./chunk-K2PDEZUY.js";
import "./chunk-SQLDXQZE.js";
import "./chunk-SVTDQ7BI.js";
import "./chunk-DKHEEVLP.js";
import "./chunk-XASQGC2G.js";
import "./chunk-UW55WAYC.js";
import "./chunk-ITGFHLJJ.js";
import "./chunk-HIZVCZYI.js";
import "./chunk-C6H2GXKH.js";
import "./chunk-HJAN2ALJ.js";
import "./chunk-SYWYLB7I.js";
import "./chunk-YLAXI6M4.js";
import "./chunk-IQQ2YREE.js";
import "./chunk-FEHR22YR.js";
import "./chunk-T3STSFBR.js";
import {
  useMutation,
  useQuery,
  useQueryClient
} from "./chunk-WFZYUW7Z.js";
import "./chunk-4J3VOWQV.js";
import "./chunk-BT7KLB2M.js";
import "./chunk-REDLA426.js";
import "./chunk-45G6F66B.js";
import "./chunk-4FW7APMX.js";
import "./chunk-5MTR5R6X.js";
import "./chunk-YWSMTYBQ.js";
import {
  useFetchClient
} from "./chunk-LEKF7NHV.js";
import "./chunk-LPBE7XLK.js";
import "./chunk-QGJX6R6E.js";
import "./chunk-YF4WERPL.js";
import "./chunk-RG54OQGG.js";
import "./chunk-UA3SUHF3.js";
import {
  require_isEmpty
} from "./chunk-LF7CT35P.js";
import "./chunk-MO5C3YSN.js";
import "./chunk-6IEWJWEN.js";
import "./chunk-LHECCKXZ.js";
import "./chunk-QR2LK3FP.js";
import "./chunk-ZNC37EV5.js";
import "./chunk-LMSPRPTZ.js";
import "./chunk-UAIZKTUC.js";
import "./chunk-6XGGUP77.js";
import "./chunk-7ZIOONYE.js";
import "./chunk-QIJGNK42.js";
import "./chunk-RJTSV6PQ.js";
import "./chunk-VXH5DZN7.js";
import "./chunk-YGSLVAOZ.js";
import "./chunk-2QXOIWVM.js";
import "./chunk-3E2QQKBP.js";
import "./chunk-QJX3IYRX.js";
import "./chunk-5GKPTERJ.js";
import "./chunk-HOYJRKYC.js";
import "./chunk-332DFF7K.js";
import {
  errorsTrads
} from "./chunk-IFOFBKTA.js";
import {
  create2 as create,
  create4 as create2,
  create6 as create3
} from "./chunk-VN6Q3TW6.js";
import "./chunk-NQSRW5O3.js";
import "./chunk-OHWPYT75.js";
import {
  MemoizedInputRenderer
} from "./chunk-BAFYO7UV.js";
import {
  Form
} from "./chunk-3V3LPMTW.js";
import {
  useRBAC
} from "./chunk-WQWE4LYC.js";
import "./chunk-H75ZHMS4.js";
import {
  Layouts
} from "./chunk-JGBQX4L2.js";
import "./chunk-PQINNV4N.js";
import "./chunk-ZPH6YYXY.js";
import {
  Page,
  useAPIErrorHandler
} from "./chunk-6HY3N7XK.js";
import "./chunk-BNCXERCP.js";
import "./chunk-U4MKBQX5.js";
import "./chunk-5AMSERGP.js";
import "./chunk-CQG5XAX6.js";
import {
  useNotification
} from "./chunk-ULMYSKHN.js";
import "./chunk-MGQ65TDB.js";
import "./chunk-LYGCZRN4.js";
import "./chunk-ZGCR6WZZ.js";
import "./chunk-5VODLFKF.js";
import {
  Box,
  Button,
  Flex,
  Grid,
  Typography,
  useIntl,
  useNotifyAT
} from "./chunk-SUPKK2GE.js";
import "./chunk-SPTT7VBO.js";
import "./chunk-T3ZUL7VN.js";
import "./chunk-2MEY62DJ.js";
import {
  ForwardRef$4F
} from "./chunk-ORONY3EB.js";
import {
  require_jsx_runtime
} from "./chunk-YHVPSBF3.js";
import "./chunk-C62VUYOE.js";
import {
  require_react
} from "./chunk-3ZCHZDHB.js";
import {
  PERMISSIONS,
  getTrad
} from "./chunk-AQZYGZIL.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/@strapi/plugin-users-permissions/dist/admin/pages/AdvancedSettings/index.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_react = __toESM(require_react(), 1);
var import_isEmpty2 = __toESM(require_isEmpty(), 1);

// node_modules/@strapi/plugin-users-permissions/dist/admin/pages/AdvancedSettings/utils/layout.mjs
var import_isEmpty = __toESM(require_isEmpty(), 1);
var layout = [
  {
    label: {
      id: getTrad("EditForm.inputToggle.label.email"),
      defaultMessage: "One account per email address"
    },
    hint: {
      id: getTrad("EditForm.inputToggle.description.email"),
      defaultMessage: "Disallow the user to create multiple accounts using the same email address with different authentication providers."
    },
    name: "unique_email",
    type: "boolean",
    size: 12
  },
  {
    label: {
      id: getTrad("EditForm.inputToggle.label.sign-up"),
      defaultMessage: "Enable sign-ups"
    },
    hint: {
      id: getTrad("EditForm.inputToggle.description.sign-up"),
      defaultMessage: "When disabled (OFF), the registration process is forbidden. No one can subscribe anymore no matter the used provider."
    },
    name: "allow_register",
    type: "boolean",
    size: 12
  },
  {
    label: {
      id: getTrad("EditForm.inputToggle.label.email-reset-password"),
      defaultMessage: "Reset password page"
    },
    hint: {
      id: getTrad("EditForm.inputToggle.description.email-reset-password"),
      defaultMessage: "URL of your application's reset password page."
    },
    placeholder: {
      id: getTrad("EditForm.inputToggle.placeholder.email-reset-password"),
      defaultMessage: "ex: https://youtfrontend.com/reset-password"
    },
    name: "email_reset_password",
    type: "string",
    size: 12
  },
  {
    label: {
      id: getTrad("EditForm.inputToggle.label.email-confirmation"),
      defaultMessage: "Enable email confirmation"
    },
    hint: {
      id: getTrad("EditForm.inputToggle.description.email-confirmation"),
      defaultMessage: "When enabled (ON), new registered users receive a confirmation email."
    },
    name: "email_confirmation",
    type: "boolean",
    size: 12
  },
  {
    label: {
      id: getTrad("EditForm.inputToggle.label.email-confirmation-redirection"),
      defaultMessage: "Redirection url"
    },
    hint: {
      id: getTrad("EditForm.inputToggle.description.email-confirmation-redirection"),
      defaultMessage: "After you confirmed your email, choose where you will be redirected."
    },
    placeholder: {
      id: getTrad("EditForm.inputToggle.placeholder.email-confirmation-redirection"),
      defaultMessage: "ex: https://youtfrontend.com/email-confirmation"
    },
    name: "email_confirmation_redirection",
    type: "string",
    size: 12
  }
];

// node_modules/@strapi/plugin-users-permissions/dist/admin/pages/AdvancedSettings/utils/schema.mjs
var URL_REGEX = new RegExp("(^$)|((.+:\\/\\/.*)(d*)\\/?(.*))");
var schema = create3().shape({
  email_confirmation_redirection: create().when("email_confirmation", {
    is: true,
    then: create2().matches(URL_REGEX).required(),
    otherwise: create2().nullable()
  }),
  email_reset_password: create2(errorsTrads.string).matches(URL_REGEX, {
    id: errorsTrads.regex.id,
    defaultMessage: "This is not a valid URL"
  }).nullable()
});

// node_modules/@strapi/plugin-users-permissions/dist/admin/pages/AdvancedSettings/index.mjs
var ProtectedAdvancedSettingsPage = () => (0, import_jsx_runtime.jsx)(Page.Protect, {
  permissions: PERMISSIONS.readAdvancedSettings,
  children: (0, import_jsx_runtime.jsx)(AdvancedSettingsPage, {})
});
var AdvancedSettingsPage = () => {
  const { formatMessage } = useIntl();
  const { toggleNotification } = useNotification();
  const { notifyStatus } = useNotifyAT();
  const queryClient = useQueryClient();
  const { get, put } = useFetchClient();
  const { formatAPIError } = useAPIErrorHandler();
  const { isLoading: isLoadingForPermissions, allowedActions: { canUpdate } } = useRBAC({
    update: PERMISSIONS.updateAdvancedSettings
  });
  const { isLoading: isLoadingData, data } = useQuery([
    "users-permissions",
    "advanced"
  ], async () => {
    const { data: data2 } = await get("/users-permissions/advanced");
    return data2;
  }, {
    onSuccess() {
      notifyStatus(formatMessage({
        id: getTrad("Form.advancedSettings.data.loaded"),
        defaultMessage: "Advanced settings data has been loaded"
      }));
    },
    onError() {
      toggleNotification({
        type: "danger",
        message: formatMessage({
          id: getTrad("notification.error"),
          defaultMessage: "An error occured"
        })
      });
    }
  });
  const isLoading = isLoadingForPermissions || isLoadingData;
  const submitMutation = useMutation((body) => put("/users-permissions/advanced", body), {
    async onSuccess() {
      await queryClient.invalidateQueries([
        "users-permissions",
        "advanced"
      ]);
      toggleNotification({
        type: "success",
        message: formatMessage({
          id: getTrad("notification.success.saved"),
          defaultMessage: "Saved"
        })
      });
    },
    onError(error) {
      toggleNotification({
        type: "danger",
        message: formatAPIError(error)
      });
    },
    refetchActive: true
  });
  const { isLoading: isSubmittingForm } = submitMutation;
  const handleSubmit = async (body) => {
    submitMutation.mutate({
      ...body,
      email_confirmation_redirection: body.email_confirmation ? body.email_confirmation_redirection : ""
    });
  };
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Page.Loading, {});
  }
  return (0, import_jsx_runtime.jsxs)(Page.Main, {
    "aria-busy": isSubmittingForm,
    children: [
      (0, import_jsx_runtime.jsx)(Page.Title, {
        children: formatMessage({
          id: "Settings.PageTitle",
          defaultMessage: "Settings - {name}"
        }, {
          name: formatMessage({
            id: getTrad("HeaderNav.link.advancedSettings"),
            defaultMessage: "Advanced Settings"
          })
        })
      }),
      (0, import_jsx_runtime.jsx)(Form, {
        onSubmit: handleSubmit,
        initialValues: data.settings,
        validationSchema: schema,
        children: ({ values, isSubmitting, modified }) => {
          return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
            children: [
              (0, import_jsx_runtime.jsx)(Layouts.Header, {
                title: formatMessage({
                  id: getTrad("HeaderNav.link.advancedSettings"),
                  defaultMessage: "Advanced Settings"
                }),
                primaryAction: (0, import_jsx_runtime.jsx)(Button, {
                  loading: isSubmitting,
                  type: "submit",
                  disabled: !modified || !canUpdate,
                  startIcon: (0, import_jsx_runtime.jsx)(ForwardRef$4F, {}),
                  size: "S",
                  children: formatMessage({
                    id: "global.save",
                    defaultMessage: "Save"
                  })
                })
              }),
              (0, import_jsx_runtime.jsx)(Layouts.Content, {
                children: (0, import_jsx_runtime.jsx)(Box, {
                  background: "neutral0",
                  hasRadius: true,
                  shadow: "filterShadow",
                  paddingTop: 6,
                  paddingBottom: 6,
                  paddingLeft: 7,
                  paddingRight: 7,
                  children: (0, import_jsx_runtime.jsxs)(Flex, {
                    direction: "column",
                    alignItems: "stretch",
                    gap: 4,
                    children: [
                      (0, import_jsx_runtime.jsx)(Typography, {
                        variant: "delta",
                        tag: "h2",
                        children: formatMessage({
                          id: "global.settings",
                          defaultMessage: "Settings"
                        })
                      }),
                      (0, import_jsx_runtime.jsx)(Grid.Root, {
                        gap: 6,
                        children: [
                          {
                            label: {
                              id: getTrad("EditForm.inputSelect.label.role"),
                              defaultMessage: "Default role for authenticated users"
                            },
                            hint: {
                              id: getTrad("EditForm.inputSelect.description.role"),
                              defaultMessage: "It will attach the new authenticated user to the selected role."
                            },
                            options: data.roles.map((role) => ({
                              label: role.name,
                              value: role.type
                            })),
                            name: "default_role",
                            size: 6,
                            type: "enumeration"
                          },
                          ...layout
                        ].map(({ size, ...field }) => (0, import_jsx_runtime.jsx)(Grid.Item, {
                          col: size,
                          direction: "column",
                          alignItems: "stretch",
                          children: (0, import_jsx_runtime.jsx)(MemoizedInputRenderer, {
                            ...field,
                            disabled: field.name === "email_confirmation_redirection" && values.email_confirmation === false,
                            label: formatMessage(field.label),
                            hint: field.hint ? formatMessage(field.hint) : void 0,
                            placeholder: field.placeholder ? formatMessage(field.placeholder) : void 0
                          })
                        }, field.name))
                      })
                    ]
                  })
                })
              })
            ]
          });
        }
      })
    ]
  });
};
export {
  AdvancedSettingsPage,
  ProtectedAdvancedSettingsPage
};
//# sourceMappingURL=AdvancedSettings-JHV5AWXT.js.map
